<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on Cortically Magnified</title>
    <link>https://www.hhyu.org/tags/emacs/</link>
    <description>Recent content in emacs on Cortically Magnified</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Jan 2021 16:04:13 +1100</lastBuildDate><atom:link href="https://www.hhyu.org/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.hhyu.org/micro/eco_note_taking/</link>
      <pubDate>Tue, 05 Jan 2021 16:04:13 +1100</pubDate>
      
      <guid>https://www.hhyu.org/micro/eco_note_taking/</guid>
      <description>I was reading about the Emacs org-roam mode, and came across the Zettelkasten method of notetaking. I hadn’t seen this term before, but the idea of taking notes with cross-referenced index cards sounded familiar. Where did I read about it? Ah yes&amp;hellip; in Umberto Eco’s Foucault’s Pendulum, the main character Casaubon (an ex-academic who makes a living as a “detective of knowledge”) uses boxes of index cards to keep track of ideas.</description>
    </item>
    
    <item>
      <title>Writing the Emacs configuration script in org-mode: a simple example of literate programming</title>
      <link>https://www.hhyu.org/posts/literate_config/</link>
      <pubDate>Tue, 05 Jan 2021 14:16:59 +1100</pubDate>
      
      <guid>https://www.hhyu.org/posts/literate_config/</guid>
      <description>Program like writers do Programming is traditionally seen as an exercise that translates human thoughts into a format that computers can understand. As a result, the ideas behind the program can become obscured and fragmented in the source code. This is why reading code requires so much mental effort. For me, reading code often feels like solving a puzzle, or reading modernist/postmodernist novels where events are narrated out of sequence. The concept of literate programming was introduced by Donald Knuth in the 80&amp;rsquo;s to address this issue.</description>
    </item>
    
    <item>
      <title>How I run emacs in client/server mode under macOS</title>
      <link>https://www.hhyu.org/posts/emacs_clientserver/</link>
      <pubDate>Mon, 30 Nov 2020 13:21:26 +1100</pubDate>
      
      <guid>https://www.hhyu.org/posts/emacs_clientserver/</guid>
      <description>Many articles are available about running Emacs in client/server mode. However, when I tried to do it in my particular environment (macOS 11.0.1 Big Sur, using zsh), some tweaks were still needed. So I figured that it&amp;rsquo;s probably useful to document my setup.
In macOS, the Emacs executable is /Applications/Emacs.app/Contents/MacOS/Emacs. To run Emacs in its regular (non-server) operation mode, I defined two shell commands in .zshrc: emacs runs Emacs in GUI mode in a macOS window, whereas emacsnw runs Emacs in text mode within the terminal.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.hhyu.org/micro/orgmode_literate/</link>
      <pubDate>Sun, 08 Nov 2020 23:29:00 +1100</pubDate>
      
      <guid>https://www.hhyu.org/micro/orgmode_literate/</guid>
      <description>About a month ago, I rewrote my Emacs config script in the style of literate programming. Emacs has a markup language (org-mode) that makes it easy to mix rich text with code. I did it mostly out of curiosity. At that time, I didn’t know if writing something as trivial as a config file this way was a good idea in terms of practicality. After a month of tweaking, I am now convinced that It was helpful.</description>
    </item>
    
  </channel>
</rss>
