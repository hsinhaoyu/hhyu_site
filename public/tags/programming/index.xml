<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Cortically Magnified</title>
    <link>https://www.hhyu.org/tags/programming/</link>
    <description>Recent content in Programming on Cortically Magnified</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Jul 2021 22:18:07 +1000</lastBuildDate>
    
	<atom:link href="https://www.hhyu.org/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Beautiful ideas: generator and continuation</title>
      <link>https://www.hhyu.org/posts/generator_and_continuation/</link>
      <pubDate>Tue, 13 Jul 2021 22:18:07 +1000</pubDate>
      
      <guid>https://www.hhyu.org/posts/generator_and_continuation/</guid>
      <description>In this post, I&amp;rsquo;ll summarize what I&amp;rsquo;ve learned from an attempt to gain a deeper understanding of two important concepts in programming: Python&amp;rsquo;s generator and Scheme&amp;rsquo;s continuation. The aim is not to explain how to program in either Python or Scheme. Rather, what I want to do is to show that generators in Python is a special case of a much more powerful construct that has been used in functional languages such as Scheme since early 70&amp;rsquo;s.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.hhyu.org/micro/grammar_of_tree-wvvmunibcjh1tn/</link>
      <pubDate>Wed, 03 Feb 2021 22:41:15 +1100</pubDate>
      
      <guid>https://www.hhyu.org/micro/grammar_of_tree-wvvmunibcjh1tn/</guid>
      <description>In the 70&amp;rsquo;s, it was fashionable for intellectuals to abuse the term &amp;ldquo;grammar&amp;rdquo; to refer to any underlying principles. In one of his essays, Italo Calvino used the term &amp;ldquo;the grammar of tree&amp;rdquo; to refer to&amp;hellip;. essentially developmental plant biology. I thought that was pretentious. But heh, in R programming, people are talking about the grammar of graphics and grammar of data manipulation again. It&amp;rsquo;s fashionable to call functions &amp;ldquo;verbs&amp;rdquo; again.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.hhyu.org/micro/pythonpynchon/</link>
      <pubDate>Wed, 02 Dec 2020 00:54:56 +1100</pubDate>
      
      <guid>https://www.hhyu.org/micro/pythonpynchon/</guid>
      <description>Idea: a Python dialect called Pynchon (after Thomas Pynchon). A pynchonic code is probably not very pythonic. Brevity is highly discouraged. Variable names should be all puns. In fact, Pynchon should be a concatenative language like Forth. This way, statements can be chained together into a longer and longer statement&amp;hellip; until the entire program is one single statement.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.hhyu.org/micro/orgmode_literate/</link>
      <pubDate>Sun, 08 Nov 2020 23:29:00 +1100</pubDate>
      
      <guid>https://www.hhyu.org/micro/orgmode_literate/</guid>
      <description>About a month ago, I rewrote my Emacs config script in the style of literate programming. Emacs has a markup language (org-mode) that makes it easy to mix rich text with code. I did it mostly out of curiosity. At that time, I didnâ€™t know if writing something as trivial as a config file this way was a good idea in terms of practicality. After a month of tweaking, I am now convinced that It was helpful.</description>
    </item>
    
  </channel>
</rss>