<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LISP on Cortically Magnified</title>
    <link>https://www.hhyu.org/tags/lisp/</link>
    <description>Recent content in LISP on Cortically Magnified</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Jul 2021 17:30:25 +1100</lastBuildDate><atom:link href="https://www.hhyu.org/tags/lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beautiful ideas in programming generators and continuations</title>
      <link>https://www.hhyu.org/posts/generator_and_continuation/</link>
      <pubDate>Fri, 16 Jul 2021 17:30:25 +1100</pubDate>
      
      <guid>https://www.hhyu.org/posts/generator_and_continuation/</guid>
      <description>In this post, I&amp;rsquo;ll summarize what I&amp;rsquo;ve learned from an attempt to gain a deeper understanding of two important concepts in programming: Python&amp;rsquo;s generators and Scheme&amp;rsquo;s continuation. The aim is not to teach Python or Scheme programming. Rather, what I want to do is to demonstrate that generators are special cases of a much more powerful construct - continuations. Continuations allow programmers to invent new control structures, and it is the foundation upon which iterators, generators, coroutines, and many other useful constructs can be built.</description>
    </item>
    
    <item>
      <title>Writing the Emacs configuration script in org-mode: a simple example of literate programming</title>
      <link>https://www.hhyu.org/posts/literate_config/</link>
      <pubDate>Tue, 05 Jan 2021 14:16:59 +1100</pubDate>
      
      <guid>https://www.hhyu.org/posts/literate_config/</guid>
      <description>Program like writers do Programming is traditionally seen as an exercise that translates human thoughts into a format that computers can understand. As a result, the ideas behind the program can become obscured and fragmented in the source code. This is why reading code requires so much mental effort. For me, reading code often feels like solving a puzzle, or reading modernist/postmodernist novels where events are narrated out of sequence. The concept of literate programming was introduced by Donald Knuth in the 80&amp;rsquo;s to address this issue.</description>
    </item>
    
  </channel>
</rss>
